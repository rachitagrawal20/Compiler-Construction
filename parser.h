// BATCH NUMBER 6
// PRASHANT KHANDELWAL 2016B4A70930P
// NAMAN DEEP SRIVASTAVA 2016B4A70891P
// RACHIT AGRAWAL 2016B2A70901P
// MOHIT KRIPLANI 2016B1A70870P
// UTKARSH AGARWAL 2016B3A70581P

/*
This file contains the core implementation of parser.
*/

#ifndef parser
#define parser
#include <stdio.h>
#include <stdlib.h>
#include "parserDef.h"
#include "lexer.h"

extern TreeNode* getParseTreeNode(int hashValue, int isNonterminal, TreeNode* parent);

// Prints first and follow sets to the corresponding text files
extern void printFirstAndFollowSet(FirstAndFollow *F, char *firstFile, char *followFile);

// Prints parse table to the corresponding text file
extern void printParseTable(ParseTable *T, char *outFile);

// Prints terminal and non-terminal hash tables to text files: terminalHash.txt and nonterminalHash.txt in generated folder
extern void writeHashTables();

// Prints separated grammar rules to the text file 
extern void printGrammar(Grammar *G, char* outFile);

// Automated computation of first and follow sets in F from G
extern void ComputeFirstAndFollowSets(Grammar *G, FirstAndFollow *F);

// Populates parse table T from grammar G and FirstAndFollow set F
extern void createParseTable(Grammar *G, FirstAndFollow *F, ParseTable *T);

// Creates and returns parse tree of the token list generated by lexer from G, T and F
extern TreeNode* parseInputSourceCode(Grammar *G, ParseTable *T, FirstAndFollow *F);

// Prints tree to the text file
extern int printTree(TreeNode *PT, char* outFile);

// Reads Updated_Grammar.txt and returns rules separated grammar ADT
extern Grammar* readGrammar();

extern TreeNode* getParseTreeNode(int hashValue, int isNonterminal, TreeNode* parent);

#endif